-- active substance
CREATE TABLE active_substance
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    aliases TEXT [],
    pubchem_id TEXT [],
    chembl_id TEXT [],
    chebi_id TEXT [],
    kegg_comp_id TEXT [],
    kegg_drug_id TEXT []
);

CREATE UNIQUE INDEX uin_active_substance_name ON active_substance (name);

CREATE OR REPLACE FUNCTION get_active_substance_id(_name TEXT, _aliases TEXT [], _pubchem_id TEXT [], _chembl_id TEXT [], _chebi_id TEXT [], _kegg_comp_id TEXT [], _kegg_drug_id TEXT []) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM active_substance a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO active_substance(name, aliases, pubchem_id, chembl_id, chebi_id, kegg_comp_id, kegg_drug_id) VALUES (_name, _aliases, _pubchem_id, _chembl_id, _chebi_id, _kegg_comp_id, _kegg_drug_id) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- time unit
CREATE TABLE time_unit
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX uin_time_unit_name ON time_unit (name);

CREATE OR REPLACE FUNCTION get_time_unit_id(_name TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM time_unit a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO time_unit(name) VALUES (_name) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- intervention_period_reference_point
CREATE TABLE intervention_period_reference_point
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX uin_intervention_period_reference_point_name ON intervention_period_reference_point (name);

CREATE OR REPLACE FUNCTION get_intervention_period_reference_point_id(_name TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM intervention_period_reference_point a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO intervention_period_reference_point(name) VALUES (_name) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- intervention_type
CREATE TABLE intervention_type
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX uin_intervention_type_name ON intervention_type (name);

CREATE OR REPLACE FUNCTION get_intervention_type_id(_name TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM intervention_type a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO intervention_type(name) VALUES (_name) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- journal
CREATE TABLE journal
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    link TEXT,
    rank TEXT
);

CREATE UNIQUE INDEX uin_journal_name ON journal (name);

CREATE OR REPLACE FUNCTION get_journal_id(_name TEXT, _link TEXT, _rank TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM journal a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO journal(name, link, rank) VALUES (_name, _link, _rank) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- species
CREATE TABLE species
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX uin_species_name ON species (name);

CREATE OR REPLACE FUNCTION get_species_id(_name TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM species a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO species(name) VALUES (_name) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- sex
CREATE TABLE sex
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX uin_sex_name ON sex (name);

CREATE OR REPLACE FUNCTION get_sex_id(_name TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM sex a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO sex(name) VALUES (_name) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- organisms_density
CREATE TABLE organisms_density
(
    id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    number    INTEGER NOT NULL,
    area      NUMERIC,
    area_unit TEXT,
    constancy boolean
);

CREATE UNIQUE INDEX uin_organisms_density_name ON organisms_density (number);

CREATE OR REPLACE FUNCTION get_organisms_density_id(_number INTEGER, _area NUMERIC, _area_unit TEXT, _constancy BOOLEAN) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM organisms_density a WHERE a.number = _number;
    IF NOT FOUND THEN
        INSERT INTO organisms_density(number, area, area_unit, constancy) VALUES (_number, _area, _area_unit, _constancy) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- dosage_unit
CREATE TABLE dosage_unit
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX uin_dosage_unit_name ON dosage_unit (name);

CREATE OR REPLACE FUNCTION get_dosage_unit_id(_name TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM dosage_unit a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO dosage_unit(name) VALUES (_name) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- experiment_site
CREATE TABLE experiment_site
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        TEXT NOT NULL,
    description TEXT
);

CREATE UNIQUE INDEX uin_experiment_site_name ON experiment_site (name);

CREATE OR REPLACE FUNCTION get_experiment_site_id(_name TEXT, _desc TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM experiment_site a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO experiment_site(name, description) VALUES (_name, _desc) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- strain
CREATE TABLE strain
(
    id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       TEXT    NOT NULL,
    species_id INTEGER NOT NULL REFERENCES species (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX uin_strain_name_species_id ON strain (name, species_id);

CREATE OR REPLACE FUNCTION get_strain_id(_name TEXT, _species_id INTEGER) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM strain a WHERE a.name = _name AND a.species_id = _species_id;
    IF NOT FOUND THEN
        INSERT INTO strain(name, species_id) VALUES (_name, _species_id) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- substance_delivery_way
CREATE TABLE substance_delivery_way
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX uin_substance_delivery_way_name ON substance_delivery_way (name);

CREATE OR REPLACE FUNCTION get_substance_delivery_way_id(_name TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM substance_delivery_way a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO substance_delivery_way(name) VALUES (_name) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- substance_delivery_frequency
CREATE TABLE substance_delivery_frequency
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX uin_substance_delivery_frequency_name ON substance_delivery_frequency (name);

CREATE OR REPLACE FUNCTION get_substance_delivery_frequency_id(_name TEXT) RETURNS INTEGER AS
$$
DECLARE
    row_id_ INTEGER;
BEGIN
    SELECT id INTO row_id_ FROM substance_delivery_frequency a WHERE a.name = _name;
    IF NOT FOUND THEN
        INSERT INTO substance_delivery_frequency(name) VALUES (_name) RETURNING id INTO row_id_;
    END IF;
    RETURN row_id_;
END;
$$ LANGUAGE plpgsql;

-- control_group
CREATE TABLE control_group
(
    id                        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    size                      INTEGER NOT NULL,
    description               TEXT,
    min_lifespan              NUMERIC,
    mean_lifespan             NUMERIC,
    median_lifespan           NUMERIC,
    max_lifespan              NUMERIC,
    lifespan_unit_id          INTEGER REFERENCES time_unit (id) ON DELETE CASCADE,
    organisms_density_id      INTEGER REFERENCES organisms_density (id) ON DELETE CASCADE,
    survival_plot_source_link TEXT,
    survival_plot_coordinates jsonb,
    survival_raw_data         jsonb
);

-- publication
CREATE TABLE publication
(
    id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    doi        TEXT,
    title      TEXT,
    pmid       TEXT,
    date       date,
    journal_id INTEGER REFERENCES journal (id) ON DELETE CASCADE,
    authors    TEXT
);

-- experiment
CREATE TABLE experiment
(
    id                              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description                     TEXT,
    publication_id                  INTEGER REFERENCES publication (id) ON DELETE CASCADE,
    species_id                      INTEGER NOT NULL REFERENCES species (id) ON DELETE CASCADE,
    control_group_id                INTEGER REFERENCES control_group (id) ON DELETE CASCADE,
    strain_id                       INTEGER REFERENCES strain (id) ON DELETE CASCADE,
    experiment_site_id              INTEGER REFERENCES experiment_site (id) ON DELETE CASCADE,
    result_change_max_lifespan      NUMERIC,
    result_change_median_lifespan   NUMERIC,
    sex_id                          INTEGER REFERENCES sex (id) ON DELETE CASCADE,
    observation_start_time          NUMERIC,
    -- temperature_conditions
    temperature_condition_range     numrange,
    temperature_condition_constance boolean,
    -- light_conditions
    light_condition_light_hours     NUMERIC,
    light_condition_dark_hours      NUMERIC,
    -- diet_condition
    diet_condition_feed             TEXT,
    diet_condition_times_per_day    NUMERIC,
    comment                         TEXT
);

-- treatment_group
CREATE TABLE treatment_group
(
    id                   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    size                 INTEGER NOT NULL,
    survival_plot_data   jsonb,
    survival_raw_data    jsonb,
    min_lifespan         NUMERIC,
    mean_lifespan        NUMERIC,
    median_lifespan      NUMERIC,
    max_lifespan         NUMERIC,
    lifespan_unit_id     INTEGER REFERENCES time_unit (id) ON DELETE CASCADE,
    organisms_density_id INTEGER REFERENCES organisms_density (id) ON DELETE CASCADE
);

-- intervention
CREATE TABLE intervention
(
    id                              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    intervention_type_id            INTEGER NOT NULL REFERENCES intervention_type (id) ON DELETE CASCADE,
    experiment_id                   INTEGER NOT NULL REFERENCES experiment (id) ON DELETE CASCADE,
    active_substance_id             INTEGER REFERENCES active_substance (id) ON DELETE CASCADE,
    dosage                          NUMERIC,
    dosage_unit_id                  INTEGER REFERENCES dosage_unit (id) ON DELETE CASCADE,
    treatment_group_id              INTEGER REFERENCES treatment_group (id) ON DELETE CASCADE,
    start_time                      NUMERIC,
    start_time_reference_point_id   INTEGER REFERENCES intervention_period_reference_point (id) ON DELETE CASCADE,
    end_time                        NUMERIC,
    end_time_reference_point_id     INTEGER REFERENCES intervention_period_reference_point (id) ON DELETE CASCADE,
    substance_delivery_way_id       INTEGER REFERENCES substance_delivery_way (id) ON DELETE CASCADE,
    substance_delivery_frequency_id INTEGER REFERENCES substance_delivery_frequency (id) ON DELETE CASCADE,
    substance_delivery_method       TEXT,
    description       TEXT
);
